#import "KGOCalendarGroup.h"
#import "KGOEvent.h"
#import "KGOCalendar.h"
#import "CoreDataManager.h"
#import "Foundation+KGOAdditions.h"

NSString * const KGOEntityNameCalendarGroup = @"KGOCalendarGroup";

@implementation KGOCalendarGroup
@dynamic identifier;
@dynamic title;
@dynamic calendars;
@dynamic sortOrder;


#pragma mark - Core data autogenerated methods


- (void)addCalendarsObject:(KGOCalendar *)value {    
    NSSet *changedObjects = [[NSSet alloc] initWithObjects:&value count:1];
    [self willChangeValueForKey:@"calendars" withSetMutation:NSKeyValueUnionSetMutation usingObjects:changedObjects];
    [[self primitiveValueForKey:@"calendars"] addObject:value];
    [self didChangeValueForKey:@"calendars" withSetMutation:NSKeyValueUnionSetMutation usingObjects:changedObjects];
    [changedObjects release];
}

- (void)removeCalendarsObject:(KGOCalendar *)value {
    NSSet *changedObjects = [[NSSet alloc] initWithObjects:&value count:1];
    [self willChangeValueForKey:@"calendars" withSetMutation:NSKeyValueMinusSetMutation usingObjects:changedObjects];
    [[self primitiveValueForKey:@"calendars"] removeObject:value];
    [self didChangeValueForKey:@"calendars" withSetMutation:NSKeyValueMinusSetMutation usingObjects:changedObjects];
    [changedObjects release];
}

- (void)addCalendars:(NSSet *)value {    
    [self willChangeValueForKey:@"calendars" withSetMutation:NSKeyValueUnionSetMutation usingObjects:value];
    [[self primitiveValueForKey:@"calendars"] unionSet:value];
    [self didChangeValueForKey:@"calendars" withSetMutation:NSKeyValueUnionSetMutation usingObjects:value];
}

- (void)removeCalendars:(NSSet *)value {
    [self willChangeValueForKey:@"calendars" withSetMutation:NSKeyValueMinusSetMutation usingObjects:value];
    [[self primitiveValueForKey:@"calendars"] minusSet:value];
    [self didChangeValueForKey:@"calendars" withSetMutation:NSKeyValueMinusSetMutation usingObjects:value];
}

#pragma mark -



+ (KGOCalendarGroup *)groupWithDictionary:(NSDictionary *)aDict
{
    KGOCalendarGroup *group = nil;
    NSString *identifier = [aDict stringForKey:@"id" nilIfEmpty:YES];
    if (identifier) {
        group = [KGOCalendarGroup groupWithID:identifier];
        
        NSString *title = [aDict stringForKey:@"title" nilIfEmpty:YES];
        if (![group.title isEqualToString:title]) {
            group.title = title;
        }
        
        NSArray *calendars = [aDict arrayForKey:@"calendars"];
        if (!calendars) {
            // if the API doesn't support calendar groups,
            // create a calendar that looks just like the group
            KGOCalendar *aCalendar = [KGOCalendar calendarWithDictionary:aDict];
            if (![group.calendars containsObject:aCalendar]) {
                [group addCalendarsObject:aCalendar];
            }
            
        } else if (calendars.count) {
            for (NSDictionary *calendarData in calendars) {
                KGOCalendar *aCalendar = [KGOCalendar calendarWithDictionary:calendarData];
                if (![group.calendars containsObject:aCalendar]) {
                    [group addCalendarsObject:aCalendar];
                }
            }
        }
    }
    DLog(@"%@", [group.calendars description]);
    
    return group;
}

+ (KGOCalendarGroup *)groupWithID:(NSString *)identifier
{
    NSPredicate *pred = [NSPredicate predicateWithFormat:@"identifier like %@", identifier];
    KGOCalendarGroup *group = [[[CoreDataManager sharedManager] objectsForEntity:KGOEntityNameCalendarGroup
                                                               matchingPredicate:pred] lastObject];
    if (!group) {
        group = [[CoreDataManager sharedManager] insertNewObjectForEntityForName:KGOEntityNameCalendarGroup];
        group.identifier = identifier;
    }
    
    return group;
}

@end
